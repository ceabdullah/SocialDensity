@{
    ViewBag.Title = "Google";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?libraries=visualization&sensor=false"></script>
<script type="text/javascript" src="~/Scripts/poly2tri.min.js"></script>
<script type="text/javascript">
    var heatmapData;
    var heatmap;
    var map;
    function initialize() {
        heatmapData = new google.maps.MVCArray();

        var centerOfMap = new google.maps.LatLng(41.008430, 28.994327);

        map = new google.maps.Map(document.getElementById('map-canvas'), {
            center: centerOfMap,
            zoom: 15,
            mapTypeId: google.maps.MapTypeId.SATELLITE
        });

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                centerOfMap = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
                map = new google.maps.Map(document.getElementById('map-canvas'), {
                    center: centerOfMap,
                    zoom: 15,
                    minZoom: 15,
                    maxZoom: 20,
                    mapTypeId: google.maps.MapTypeId.SATELLITE
                });
                //divideRectangle(40.963080, 29.073317, 40.981744, 29.042932, 0.01);
                divideRectangle(centerOfMap.lat(), centerOfMap.lng(), 3, 0.01);
                heatmap = new google.maps.visualization.HeatmapLayer({
                    data: heatmapData,
                    radius: 20
                });
                heatmap.setMap(map);
            });
        }

    }
    $(function () {
        $("#map-canvas").width($(document).width());
        $("#map-canvas").height($(document).height());
        initialize();
    });

    //function divideRectangle(minLat, minLon, maxLat, maxLon, aperture) {
    //    var coordinates = new Array();
    //    var coor = findPointsInPolygon(minLat, minLon, maxLat, maxLon, aperture);
    //    for (var i = 0; i < coor.length; i++) {
    //        var cCoordinate = coor[i];
    //        getCellsByCoordinate(cCoordinate.lat(), cCoordinate.lng(), minLat, minLon);
    //    }
    //}

    function divideRectangle(lat, lng, radius, aperture) {

        //CALCULATE RECTANGLE
        var pointOrigin = new google.maps.LatLng(lat, lng);
        var radiusInKm = radius;
        var point1 = pointOrigin.destinationPoint(135, radiusInKm);
        var point2 = pointOrigin.destinationPoint(320, radiusInKm);
        //CALCULATE RECTANGLE

        var coordinates = new Array();
        var coor = findPointsInPolygon(point1.lat(), point1.lng(), point2.lat(), point2.lng(), aperture);
        for (var i = 0; i < coor.length; i++) {
            var cCoordinate = coor[i];
            getCellsByCoordinate(cCoordinate.lat(), cCoordinate.lng(), point1.lat(), point1.lng());
        }
    }

    function findPointsInPolygon(lat, lon, lat2, lon2, aperture) {
        var coordinates = new Array();
        for (var i = lat; i <= lat2; i += aperture) {
            for (var k = lon2; k <= lon; k += aperture) {
                coordinates.push(new google.maps.LatLng(i, k));
            }
        }
        return coordinates;
    }
    var marker;
    function getCellsByCoordinate(minLat, minLon, maxLat, maxLon) {
        $.ajax({
            type: "GET",
            url: "http://opencellid.org/" + "cell/getInArea" + "?" + "key=" + "acbf74e6-3bfc-4eb7-a753-da6418050a47" + "&BBOX=" + minLat + "," + minLon + "," + maxLat + "," + maxLon + "&format=json",
            success: function (data) {
                data = data.cells;
                $.each(data, function (index) {
                    var cCell = $(this);
                    if ($.inArray(new google.maps.LatLng(cCell[0].lat, cCell[0].lon), heatmapData) == -1) {
                        $.ajax({
                            type: "GET",
                            url: "http://opencellid.org/" + "cell/getMeasures" + "?" + "key=" + "acbf74e6-3bfc-4eb7-a753-da6418050a47" + "&cellid=" + cCell[0].cellid + "&mcc=" + cCell[0].mcc + "&mnc=" + cCell[0].mnc + "&lac=" + cCell[0].lac + "&format=json",
                            success: function (data) {
                                cCell[0].measurements = data.measurements;
                                var cSignaldBm = cCell[0].measurements[0].signal;
                                var networkType = cCell[0].measurements[0].radio;
                                var cSignalASU = convertDBMToASU(cSignaldBm, networkType);
                                heatmapData.push({ location: new google.maps.LatLng(cCell[0].lat, cCell[0].lon), weight: cSignalASU });
                            },
                            error: function (error) {
                                debugger;
                            }
                        });
                    }
                });
            },
            error: function (error) {
                debugger;
            }
        });
        //
    }

    function convertDBMToASU(cSignaldBm, networkType) {
        var cSignalASU;
        switch (networkType) {
            case "CDMA":
                if (parseInt(cSignaldBm) > -75) {
                    cSignalASU = 16;
                }
                else if (parseInt(cSignaldBm) > -82) {
                    cSignalASU = 8;
                }
                else if (parseInt(cSignaldBm) > -90) {
                    cSignalASU = 4;
                }
                else if (parseInt(cSignaldBm) > -95) {
                    cSignalASU = 2;
                }
                else if (parseInt(cSignaldBm) > -100) {
                    cSignalASU = 1;
                }
                else {
                    cSignalASU = 0;
                }
                break;
            case "GSM":
                //RSSI [dBm] = (2x ASU) - 113
                cSignalASU = (cSignaldBm + 113) / 2;
                break;
            case "LTE":
                //RSRP [dBm] = ASU - 140
                cSignalASU = (cSignaldBm + 140);
                break;
            case "UMTS":
                //RSCP [dBm] = ASU - 116
                cSignalASU = (cSignaldBm + 116);
                break;
            default:
                cSignalASU = 0;
                break;
        }
        return cSignalASU;
    }

    //CALCULATE POINT BY DISTANCE
    Number.prototype.toRad = function () {
        return this * Math.PI / 180;
    }

    Number.prototype.toDeg = function () {
        return this * 180 / Math.PI;
    }

    google.maps.LatLng.prototype.destinationPoint = function (brng, dist) {
        dist = dist / 6371;
        brng = brng.toRad();

        var lat1 = this.lat().toRad(), lon1 = this.lng().toRad();

        var lat2 = Math.asin(Math.sin(lat1) * Math.cos(dist) +
                             Math.cos(lat1) * Math.sin(dist) * Math.cos(brng));

        var lon2 = lon1 + Math.atan2(Math.sin(brng) * Math.sin(dist) *
                                     Math.cos(lat1),
                                     Math.cos(dist) - Math.sin(lat1) *
                                     Math.sin(lat2));

        if (isNaN(lat2) || isNaN(lon2)) return null;

        return new google.maps.LatLng(lat2.toDeg(), lon2.toDeg());
    }
    //CALCULATE POINT BY DISTANCE

</script>
<div id="map-canvas"></div>