@{
    ViewBag.Title = "Google";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?libraries=visualization&sensor=false"></script>
<script type="text/javascript" src="~/Scripts/poly2tri.min.js"></script>
<script type="text/javascript">
    //41.008430, 28.994327
    var heatmapData;
    var heatmap;
    var map;
    function initialize() {
        //var mapOptions = {
        //    center: { lat: 41.008430, lng: 28.994327 },
        //    zoom: 11
        //};
        //var map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);

        //       heatmapData = [
        ////new google.maps.LatLng(37.782, -122.447),
        ////new google.maps.LatLng(37.782, -122.445),
        ////new google.maps.LatLng(37.782, -122.443),
        ////new google.maps.LatLng(37.782, -122.441),
        ////new google.maps.LatLng(37.782, -122.439),
        ////new google.maps.LatLng(37.782, -122.437),
        ////new google.maps.LatLng(37.782, -122.435),
        ////new google.maps.LatLng(37.785, -122.447),
        ////new google.maps.LatLng(37.785, -122.445),
        ////new google.maps.LatLng(37.785, -122.443),
        ////new google.maps.LatLng(37.785, -122.441),
        ////new google.maps.LatLng(37.785, -122.439),
        ////new google.maps.LatLng(37.785, -122.437),
        ////new google.maps.LatLng(37.785, -122.435)
        //       ];

        heatmapData = new google.maps.MVCArray();

        var sanFrancisco = new google.maps.LatLng(41.008430, 28.994327);

        map = new google.maps.Map(document.getElementById('map-canvas'), {
            center: sanFrancisco,
            zoom: 13,
            mapTypeId: google.maps.MapTypeId.SATELLITE
        });

        //heatmap = new google.maps.visualization.HeatmapLayer({
        //    data: heatmapData,
        //    radius: 10
        //});
        //heatmap.setMap(map);
    }
    $(function () {
        $("#map-canvas").width($(document).width());
        $("#map-canvas").height($(document).height());
        initialize();
        //getCellsByCoordinate("41.308531", "28.604999", "40.788628", "29.461932");
        //divideRectangle("41.308531", "28.604999", "40.788628", "29.461932");
        //divideRectangle(40.788628, 29.461932, 41.308531, 28.604999, 0.1);
        //divideRectangle(40.934883, 29.136390, 41.001377, 29.032363, 0.01);
        divideRectangle(40.963080, 29.073317, 40.981744, 29.042932, 0.01);
    });

    function divideRectangle(minLat, minLon, maxLat, maxLon, aperture) {
        //    var contour = [
        //new poly2tri.Point(minLat, minLon),
        // new poly2tri.Point(maxLat, minLon),
        // new poly2tri.Point(maxLat, maxLon),
        //new poly2tri.Point(minLat, maxLon)
        //    ];
        //    var swctx = new poly2tri.SweepContext(contour);
        //    swctx.triangulate();
        //    var triangles = swctx.getTriangles();
        var coordinates = new Array();
        var coor = findPointsInPolygon(minLat, minLon, maxLat, maxLon, aperture);
        for (var i = 0; i < coor.length; i++) {
            var cCoordinate = coor[i];
            //coordinates.push({ min: new google.maps.LatLng(minLat, minLon), max: new google.maps.LatLng(cCoordinate.lat(), cCoordinate.lng()) });
            getCellsByCoordinate(cCoordinate.lat(), cCoordinate.lng(), minLat, minLon);
        }
    }

    function findPointsInPolygon(lat, lon, lat2, lon2, aperture) {
        var coordinates = new Array();
        for (var i = lat; i <= lat2; i += aperture) {
            for (var k = lon2; k <= lon; k += aperture) {
                coordinates.push(new google.maps.LatLng(i, k));
            }
        }
        return coordinates;
    }
    var marker;
    function getCellsByCoordinate(minLat, minLon, maxLat, maxLon) {
        //$.ajax({
        //    type: "POST",
        //    dataType: "json",
        //    contentType: "application/json; charset=utf-8",
        //    url: "/CellularData/GetCellsByCoordinate",
        //    data:
        //        '{'
        //        + '"minLat' + '":"' + minLat + '",'
        //        + '"minLon' + '":"' + minLon + '",'
        //        + '"maxLat' + '":"' + maxLat + '",'
        //        + '"maxLon' + '":"' + maxLon
        //        + '"}',
        //    success: function (data) {
        //        debugger;
        //    },
        //    error: function (error) {
        //        debugger;
        //    }
        //});
        $.ajax({
            type: "GET",
            //dataType: "json",
            //contentType: "application/json; charset=utf-8",
            url: "http://opencellid.org/" + "cell/getInArea" + "?" + "key=" + "acbf74e6-3bfc-4eb7-a753-da6418050a47" + "&BBOX=" + minLat + "," + minLon + "," + maxLat + "," + maxLon + "&format=json",
            //data:
            //    '{'
            //    + '"minLat' + '":"' + minLat + '",'
            //    + '"minLon' + '":"' + minLon + '",'
            //    + '"maxLat' + '":"' + maxLat + '",'
            //    + '"maxLon' + '":"' + maxLon
            //    + '"}',
            success: function (data) {
                //data = $.grep(data.cells, function (a) {
                //    return a.averageSignalStrength != 0;
                //});
                data = data.cells;
                $.each(data, function (index) {
                    var cCell = $(this);
                    if ($.inArray(new google.maps.LatLng(cCell[0].lat, cCell[0].lon), heatmapData) == -1) {
                        //marker = new google.maps.Marker({
                        //    position: new google.maps.LatLng(cCell[0].lat, cCell[0].lon),
                        //    map: map
                        //});
                        $.ajax({
                            type: "GET",
                            url: "http://opencellid.org/" + "cell/getMeasures" + "?" + "key=" + "acbf74e6-3bfc-4eb7-a753-da6418050a47" + "&cellid=" + cCell[0].cellid + "&mcc=" + cCell[0].mcc + "&mnc=" + cCell[0].mnc + "&lac=" + cCell[0].lac + "&format=json",
                            success: function (data) {
                                //cCell[0].measurements = $.grep(data.measurements, function (a) { return a.signal != 0; });
                                cCell[0].measurements = data.measurements;
                                var cSignaldBm = cCell[0].measurements[0].signal;
                                var networkType = cCell[0].measurements[0].radio;
                                var cSignalASU = convertDBMToASU(cSignaldBm, networkType);
                                heatmapData.push({ location: new google.maps.LatLng(cCell[0].lat, cCell[0].lon), weight: cSignalASU });
                                debugger;
                            },
                            error: function (error) {
                                debugger;
                            }
                        });
                    }
                });
                //$.each(data, function (index) {
                //    var cCell = $(this);
                //    setTimeout(function () {
                //        $.ajax({
                //            type: "GET",
                //            url: "http://opencellid.org/" + "cell/getMeasures" + "?" + "key=" + "acbf74e6-3bfc-4eb7-a753-da6418050a47" + "&cellid=" + cCell[0].cellid + "&mcc=" + cCell[0].mcc + "&mnc=" + cCell[0].mnc + "&lac=" + cCell[0].lac + "&format=json",
                //            success: function (data) {
                //                cCell[0].measurements = $.grep(data.measurements, function (a) { return a.signal != 0; });
                //                heatmapData.push(new google.maps.LatLng(cCell[0].lat, cCell[0].lon));

                //                debugger;
                //            },
                //            error: function (error) {
                //                debugger;
                //            }
                //        });
                //    }, 300);
                //});
            },
            error: function (error) {
                debugger;
            }
        });
        //
    }

    function convertDBMToASU(cSignaldBm, networkType) {
        var cSignalASU;
        switch (networkType) {
            case "CDMA":
                if (parseInt(cSignaldBm) > -75) {
                    cSignalASU = 16;
                }
                else if (parseInt(cSignaldBm) > -82) {
                    cSignalASU = 8;
                }
                else if (parseInt(cSignaldBm) > -90) {
                    cSignalASU = 4;
                }
                else if (parseInt(cSignaldBm) > -95) {
                    cSignalASU = 2;
                }
                else if (parseInt(cSignaldBm) > -100) {
                    cSignalASU = 1;
                }
                else {
                    cSignalASU = 0;
                }
                break;
            case "GSM":
                //RSSI [dBm] = (2x ASU) - 113
                cSignalASU = (cSignaldBm + 113) / 2;
                break;
            case "LTE":
                //RSRP [dBm] = ASU - 140
                cSignalASU = (cSignaldBm + 140);
                break;
            case "UMTS":
                //RSCP [dBm] = ASU - 116
                cSignalASU = (cSignaldBm + 116);
                break;
            default:
                cSignalASU = 0;
                break;
        }
        return cSignalASU;
    }

</script>
<div id="map-canvas"></div>